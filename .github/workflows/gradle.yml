name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
env:
  DOCKER_IMAGE_NAME: andrewsynkov/management-service:latest
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16.1-alpine
        env:
          POSTGRES_DB: postgres-db
          POSTGRES_USER: postgres-user
          POSTGRES_PASSWORD: postgres-password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.4
      - name: Execute Gradle build
        run: ./gradlew clean bootJar
      - name: Login to Docker
        run: echo ${{secrets.DOCKER_REGISTRY_ACCESS_TOKEN}} | docker login -u andrewsynkov --password-stdin
      - name: Build Docker image
        run: docker build --platform linux/amd64/v2 -t management-service . --file Dockerfile --tag ${{env.DOCKER_IMAGE_NAME}}
      - name: Publish Docker image
        run: docker push ${{env.DOCKER_IMAGE_NAME}}
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{secrets.SERVER_SSH_PRIVATE_KEY}}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{secrets.SERVER_HOST}} > ~/.ssh/known_hosts
      - name: Create docker compose env file
        run: |
          echo "TODOIST_API_TOKEN=${{secrets.TODOIST_API_TOKEN}}" > ~/.env
          echo "TODOIST_HOST=${{secrets.TODOIST_HOST}}" >> ~/.env
          echo "TELEGRAM_TOKEN=${{secrets.TELEGRAM_TOKEN}}" >> ~/.env
          echo "TELEGRAM_BOT=${{secrets.TELEGRAM_BOT}}" >> ~/.env
          echo "TELEGRAM_CHAT_ID=${{secrets.TELEGRAM_CHAT_ID}}" >> ~/.env
          echo "DB_HOST=db" >> ~/.env
          echo "DB_NAME=management-service-db" >> ~/.env
          echo "DB_USER=${{secrets.DB_USER}}" >> ~/.env
          echo "DB_PASSWORD=${{secrets.DB_PASSWORD}}" >> ~/.env
          echo "DB_PORT=5432" >> ~/.env
      - name: Send docker compose env file to remote server
        run: scp ~/.env ${{secrets.SSH_SERVER_USER}}@${{secrets.SERVER_HOST}}:~/
      - name: Send docker compose file to remote server
        run: scp ./docker/docker-compose.yml ${{secrets.SSH_SERVER_USER}}@${{secrets.SERVER_HOST}}:~/
      - name: Docker pull odcker image
        run: ssh ${{secrets.SSH_SERVER_USER}}@${{secrets.SERVER_HOST}} "docker pull ${{env.DOCKER_IMAGE_NAME}}"
      - name: Docker compose up application
        run: ssh ${{secrets.SSH_SERVER_USER}}@${{secrets.SERVER_HOST}} "docker compose -f ~/docker-compose.yml --env-file ~/.env up management-service -d --force-recreate"
      - name: Docker compose up db
        run: ssh ${{secrets.SSH_SERVER_USER}}@${{secrets.SERVER_HOST}} "docker compose -f ~/docker-compose.yml --env-file ~/.env up db -d --no-recreate"
      - name: Remove docker compose files
        run: |
          ssh ${{secrets.SSH_SERVER_USER}}@${{secrets.SERVER_HOST}} 'rm ~/.env'
          ssh ${{secrets.SSH_SERVER_USER}}@${{secrets.SERVER_HOST}} 'rm ~/docker-compose.yml'
          rm ~/.env
      - name: Remove ssh files
        run: |
          rm ~/.ssh/id_rsa
          rm ~/.ssh/known_hosts