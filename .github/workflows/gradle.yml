name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
env:
  DOCKER_IMAGE_NAME: andrewsynkov/management-service:latest
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.4
      - name: Execute Gradle build
        run: ./gradlew clean test bootJar
      - name: Login to Docker
        run: echo ${{secrets.DOCKER_REGISTRY_ACCESS_TOKEN}} | docker login -u andrewsynkov --password-stdin
      - name: Build Docker image
        run: docker build --platform linux/amd64/v2 -t management-service . --file Dockerfile --tag ${{env.DOCKER_IMAGE_NAME}}
      - name: Publish Docker image
        run: docker push ${{env.DOCKER_IMAGE_NAME}}
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{secrets.SERVER_SSH_PRIVATE_KEY}}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{secrets.SERVER_HOST}} > ~/.ssh/known_hosts
      - name: Ps
        run: (ssh ${{secrets.SSH_SERVER_USER}}@${{secrets.SERVER_HOST}} "docker ps -a -q --filter ancestor=${{env.DOCKER_IMAGE_NAME}}") >> $OLD_DOCKER_CONTAINER

      - name: Ps container
        run: echo $OLD_DOCKER_CONTAINER


      - name: Stop old docker container
        run: (ssh ${{secrets.SSH_SERVER_USER}}@${{secrets.SERVER_HOST}} "docker stop $OLD_DOCKER_CONTAINER") >> $OLD_DOCKER_IMAGE


      - name: Remove old docker container
        run: ssh ${{secrets.SSH_SERVER_USER}}@${{secrets.SERVER_HOST}} "docker rm $OLD_DOCKER_IMAGE"

      - name: Pull new image
        run: ssh ${{secrets.SSH_SERVER_USER}}@${{secrets.SERVER_HOST}} "docker pull ${{env.DOCKER_IMAGE_NAME}}"
      - name: Run container from new image
        run: ssh ${{secrets.SSH_SERVER_USER}}@${{secrets.SERVER_HOST}} "docker run -p 8181:8080 --name management-service -d ${{env.DOCKER_IMAGE_NAME}}"

