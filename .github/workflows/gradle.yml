name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
env:
  DOCKER_IMAGE_NAME: andrewsynkov/management-service:latest
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16.1-alpine
        env:
          POSTGRES_DB: postgres-db
          POSTGRES_USER: postgres-user
          POSTGRES_PASSWORD: postgres-password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.4
      - name: Execute Gradle build
        run: ./gradlew clean bootJar
      - name: Login to Docker
        run: echo ${{secrets.DOCKER_REGISTRY_ACCESS_TOKEN}} | docker login -u andrewsynkov --password-stdin
      - name: Build Docker image
        run: docker build --platform linux/amd64/v2 -t management-service . --file Dockerfile --tag ${{env.DOCKER_IMAGE_NAME}}
      - name: Publish Docker image
        run: docker push ${{env.DOCKER_IMAGE_NAME}}
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install ssh keys
        id: install-ssh
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{secrets.SERVER_SSH_PRIVATE_KEY}}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{secrets.SERVER_HOST}} > ~/.ssh/known_hosts

      - name: Get old container
        id: get-old-container
        run: echo "OLD_CONTAINER=$(ssh ${{secrets.SSH_SERVER_USER}}@${{secrets.SERVER_HOST}} "docker ps -a -q --filter ancestor=${{env.DOCKER_IMAGE_NAME}}")" >> "$GITHUB_OUTPUT"

      - name: Stop old docker container
        id: stop-old-container
        run: echo "OLD_IMAGE=$(ssh ${{secrets.SSH_SERVER_USER}}@${{secrets.SERVER_HOST}} "docker stop ${{steps.get-old-container.outputs.OLD_CONTAINER}}")" >> "$GITHUB_OUTPUT"

      - name: Remove old docker image
        id: remove-old-image
        run: ssh ${{secrets.SSH_SERVER_USER}}@${{secrets.SERVER_HOST}} "docker rm ${{steps.stop-old-container.outputs.OLD_IMAGE}}"

      - name: Pull new image
        id: pull-new-image
        run: ssh ${{secrets.SSH_SERVER_USER}}@${{secrets.SERVER_HOST}} "docker pull ${{env.DOCKER_IMAGE_NAME}}"

      - name: Run container from new image
        id: run-new-container
        run: ssh ${{secrets.SSH_SERVER_USER}}@${{secrets.SERVER_HOST}} "docker run -e TODOIST_API_TOKEN=${{secrets.TODOIST_API_TOKEN}} -e TODOIST_HOST=${{secrets.TODOIST_HOST}} -e TELEGRAM_TOKEN=${{secrets.TELEGRAM_TOKEN}} -e TELEGRAM_BOT=${{secrets.TELEGRAM_BOT}} -e TELEGRAM_CHAT_ID=${{secrets.TELEGRAM_CHAT_ID}} -e DB_USER=${{secrets.DB_USER}} -e DB_PASSWORD=${{secrets.DB_PASSWORD}} -p 8181:8080 --name management-service -d ${{env.DOCKER_IMAGE_NAME}}"

